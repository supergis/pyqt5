/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6-snapshot-3c5425fa3c80 on Thu Jan 22 20:35:41 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/supermap/OpenThings/pyqt5/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 29 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 36 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 39 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/supermap/OpenThings/pyqt5/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"


class sipQBluetoothDeviceDiscoveryAgent : public QBluetoothDeviceDiscoveryAgent
{
public:
    sipQBluetoothDeviceDiscoveryAgent(QObject*);
    sipQBluetoothDeviceDiscoveryAgent(const QBluetoothAddress&,QObject*);
    virtual ~sipQBluetoothDeviceDiscoveryAgent();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothDeviceDiscoveryAgent(const sipQBluetoothDeviceDiscoveryAgent &);
    sipQBluetoothDeviceDiscoveryAgent &operator = (const sipQBluetoothDeviceDiscoveryAgent &);

    char sipPyMethods[7];
};

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent(QObject*a0): QBluetoothDeviceDiscoveryAgent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent(const QBluetoothAddress& a0,QObject*a1): QBluetoothDeviceDiscoveryAgent(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::~sipQBluetoothDeviceDiscoveryAgent()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBluetoothDeviceDiscoveryAgent::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent);
}

int sipQBluetoothDeviceDiscoveryAgent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBluetoothDeviceDiscoveryAgent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent,_c,_id,_a);

    return _id;
}

void *sipQBluetoothDeviceDiscoveryAgent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothDeviceDiscoveryAgent, _clname, &sipCpp) ? sipCpp : QBluetoothDeviceDiscoveryAgent::qt_metacast(_clname));
}

void sipQBluetoothDeviceDiscoveryAgent::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QBluetoothDeviceDiscoveryAgent::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QBluetoothDeviceDiscoveryAgent::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QBluetoothDeviceDiscoveryAgent::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QBluetoothDeviceDiscoveryAgent::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QBluetoothDeviceDiscoveryAgent::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothDeviceDiscoveryAgent::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QBluetoothDeviceDiscoveryAgent::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothDeviceDiscoveryAgent::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QBluetoothDeviceDiscoveryAgent::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_inquiryType, "QBluetoothDeviceDiscoveryAgent.inquiryType() -> QBluetoothDeviceDiscoveryAgent.InquiryType");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QBluetoothDeviceDiscoveryAgent::InquiryType sipRes;

            sipRes = sipCpp->inquiryType();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_InquiryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_inquiryType, doc_QBluetoothDeviceDiscoveryAgent_inquiryType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType, "QBluetoothDeviceDiscoveryAgent.setInquiryType(QBluetoothDeviceDiscoveryAgent.InquiryType)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothDeviceDiscoveryAgent::InquiryType a0;
        QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, sipType_QBluetoothDeviceDiscoveryAgent_InquiryType, &a0))
        {
            sipCpp->setInquiryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_setInquiryType, doc_QBluetoothDeviceDiscoveryAgent_setInquiryType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_isActive, "QBluetoothDeviceDiscoveryAgent.isActive() -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_isActive, doc_QBluetoothDeviceDiscoveryAgent_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_error, "QBluetoothDeviceDiscoveryAgent.error() -> QBluetoothDeviceDiscoveryAgent.Error");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QBluetoothDeviceDiscoveryAgent::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_error, doc_QBluetoothDeviceDiscoveryAgent_error);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_errorString, "QBluetoothDeviceDiscoveryAgent.errorString() -> str");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_errorString, doc_QBluetoothDeviceDiscoveryAgent_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices, "QBluetoothDeviceDiscoveryAgent.discoveredDevices() -> list-of-QBluetoothDeviceInfo");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QList<QBluetoothDeviceInfo>*sipRes;

            sipRes = new QList<QBluetoothDeviceInfo>(sipCpp->discoveredDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothDeviceInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_discoveredDevices, doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_start, "QBluetoothDeviceDiscoveryAgent.start()");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_start, doc_QBluetoothDeviceDiscoveryAgent_start);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_stop, "QBluetoothDeviceDiscoveryAgent.stop()");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_stop, doc_QBluetoothDeviceDiscoveryAgent_stop);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBluetoothDeviceDiscoveryAgent(void *, const sipTypeDef *);}
static void *cast_QBluetoothDeviceDiscoveryAgent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QBluetoothDeviceDiscoveryAgent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QBluetoothDeviceDiscoveryAgent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceDiscoveryAgent(void *, int);}
static void release_QBluetoothDeviceDiscoveryAgent(void *sipCppV,int)
{
    QBluetoothDeviceDiscoveryAgent *sipCpp = reinterpret_cast<QBluetoothDeviceDiscoveryAgent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBluetoothDeviceDiscoveryAgent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBluetoothDeviceDiscoveryAgent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothDeviceDiscoveryAgent *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QBluetoothAddress* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothDeviceDiscoveryAgent[] = {{162, 0, 1}};


static PyMethodDef methods_QBluetoothDeviceDiscoveryAgent[] = {
    {SIP_MLNAME_CAST(sipName_discoveredDevices), meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothDeviceDiscoveryAgent_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothDeviceDiscoveryAgent_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_errorString)},
    {SIP_MLNAME_CAST(sipName_inquiryType), meth_QBluetoothDeviceDiscoveryAgent_inquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_inquiryType)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBluetoothDeviceDiscoveryAgent_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_isActive)},
    {SIP_MLNAME_CAST(sipName_setInquiryType), meth_QBluetoothDeviceDiscoveryAgent_setInquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType)},
    {SIP_MLNAME_CAST(sipName_start), meth_QBluetoothDeviceDiscoveryAgent_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBluetoothDeviceDiscoveryAgent_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_stop)}
};

static sipEnumMemberDef enummembers_QBluetoothDeviceDiscoveryAgent[] = {
    {sipName_GeneralUnlimitedInquiry, static_cast<int>(QBluetoothDeviceDiscoveryAgent::GeneralUnlimitedInquiry), 6},
    {sipName_InputOutputError, static_cast<int>(QBluetoothDeviceDiscoveryAgent::InputOutputError), 5},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>(QBluetoothDeviceDiscoveryAgent::InvalidBluetoothAdapterError), 5},
    {sipName_LimitedInquiry, static_cast<int>(QBluetoothDeviceDiscoveryAgent::LimitedInquiry), 6},
    {sipName_NoError, static_cast<int>(QBluetoothDeviceDiscoveryAgent::NoError), 5},
    {sipName_PoweredOffError, static_cast<int>(QBluetoothDeviceDiscoveryAgent::PoweredOffError), 5},
    {sipName_UnknownError, static_cast<int>(QBluetoothDeviceDiscoveryAgent::UnknownError), 5},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothDeviceDiscoveryAgent[] = {
    {"canceled()", "\1QBluetoothDeviceDiscoveryAgent.canceled", 0, 0},
    {"finished()", "\1QBluetoothDeviceDiscoveryAgent.finished", 0, 0},
    {"deviceDiscovered(QBluetoothDeviceInfo)", "\1QBluetoothDeviceDiscoveryAgent.deviceDiscovered[QBluetoothDeviceInfo]", 0, 0},
    {"error(QBluetoothDeviceDiscoveryAgent::Error)", "\1QBluetoothDeviceDiscoveryAgent.error[QBluetoothDeviceDiscoveryAgent.Error]", &methods_QBluetoothDeviceDiscoveryAgent[1], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent, "\1QBluetoothDeviceDiscoveryAgent(QObject parent=None)\n"
    "QBluetoothDeviceDiscoveryAgent(QBluetoothAddress, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceDiscoveryAgent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {0}
    },
    {
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {0, 0, 1},
        8, methods_QBluetoothDeviceDiscoveryAgent,
        7, enummembers_QBluetoothDeviceDiscoveryAgent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothDeviceDiscoveryAgent,
    -1,
    -1,
    supers_QBluetoothDeviceDiscoveryAgent,
    0,
    init_type_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
    0,
    release_QBluetoothDeviceDiscoveryAgent,
    cast_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QBluetoothDeviceDiscoveryAgent::staticMetaObject,
    0,
    signals_QBluetoothDeviceDiscoveryAgent,
    0
};
