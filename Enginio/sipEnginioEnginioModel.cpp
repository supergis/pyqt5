/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6-snapshot-3c5425fa3c80 on Thu Jan 22 20:35:53 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIEnginio.h"

#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginiomodel.sip"
#include <enginiomodel.h>
#line 29 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginio.sip"
#include <enginio.h>
#line 36 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginioclient.sip"
#include <enginioclient.h>
#line 39 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 24 "sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 42 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginioreply.sip"
#include <enginioreply.h>
#line 45 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 48 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 54 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 60 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 266 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 66 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 78 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 70 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 84 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 87 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 90 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 99 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 144 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 102 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 105 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 114 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 117 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 120 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 123 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 129 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 132 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 135 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioModel.cpp"


class sipEnginioModel : public EnginioModel
{
public:
    sipEnginioModel(QObject*);
    virtual ~sipEnginioModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool moveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    bool moveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    bool canDropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&) const;
    QHash<int,QByteArray> roleNames() const;
    Qt::DropActions supportedDragActions() const;
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    Qt::DropActions supportedDropActions() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    QVariant data(const QModelIndex&,int) const;
    int rowCount(const QModelIndex&) const;
    QModelIndex sibling(int,int,const QModelIndex&) const;
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipEnginioModel(const sipEnginioModel &);
    sipEnginioModel &operator = (const sipEnginioModel &);

    char sipPyMethods[37];
};

sipEnginioModel::sipEnginioModel(QObject*a0): EnginioModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipEnginioModel::~sipEnginioModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipEnginioModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_Enginio_qt_metaobject(sipPySelf,sipType_EnginioModel);
}

int sipEnginioModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = EnginioModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Enginio_qt_metacall(sipPySelf,sipType_EnginioModel,_c,_id,_a);

    return _id;
}

void *sipEnginioModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_Enginio_qt_metacast(sipPySelf, sipType_EnginioModel, _clname, &sipCpp) ? sipCpp : EnginioModel::qt_metacast(_clname));
}

void sipEnginioModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        EnginioModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_Enginio_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        EnginioModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_Enginio_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        EnginioModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Enginio_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        EnginioModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_Enginio_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        EnginioModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Enginio_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return EnginioModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_Enginio_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipEnginioModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return EnginioModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Enginio_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioModel::moveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return EnginioModel::moveColumns(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_Enginio_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipEnginioModel::moveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return EnginioModel::moveRows(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_Enginio_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipEnginioModel::canDropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return EnginioModel::canDropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_Enginio_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int,QByteArray> sipEnginioModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return EnginioModel::roleNames();

    typedef QHash<int,QByteArray> (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_60)(sipModuleAPI_Enginio_QtCore->em_virthandlers[60]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::DropActions sipEnginioModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return EnginioModel::supportedDragActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Enginio_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipEnginioModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        EnginioModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Enginio_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipEnginioModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return EnginioModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_Enginio_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipEnginioModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return EnginioModel::span(a0);

    typedef QSize (*sipVH_QtCore_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_29)(sipModuleAPI_Enginio_QtCore->em_virthandlers[29]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndexList sipEnginioModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return EnginioModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_28)(sipModuleAPI_Enginio_QtCore->em_virthandlers[28]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipEnginioModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return EnginioModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_30)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_30)(sipModuleAPI_Enginio_QtCore->em_virthandlers[30]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        EnginioModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_19)(sipModuleAPI_Enginio_QtCore->em_virthandlers[19]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipEnginioModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return EnginioModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_Enginio_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        EnginioModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_Enginio_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return EnginioModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_Enginio_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipEnginioModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return EnginioModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_Enginio_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipEnginioModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return EnginioModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_Enginio_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipEnginioModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return EnginioModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_Enginio_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

Qt::DropActions sipEnginioModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return EnginioModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_Enginio_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QMimeData* sipEnginioModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return EnginioModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_34)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_34)(sipModuleAPI_Enginio_QtCore->em_virthandlers[34]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipEnginioModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return EnginioModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_Enginio_QtCore->em_virthandlers[27]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipEnginioModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return EnginioModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_56)(sipModuleAPI_Enginio_QtCore->em_virthandlers[56]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipEnginioModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return EnginioModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_57)(sipModuleAPI_Enginio_QtCore->em_virthandlers[57]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return EnginioModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_35)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_35)(sipModuleAPI_Enginio_QtCore->em_virthandlers[35]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipEnginioModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return EnginioModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_36)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_36)(sipModuleAPI_Enginio_QtCore->em_virthandlers[36]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipEnginioModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,sipName_EnginioModel,sipName_data);

    if (!sipMeth)
        return QVariant();

    typedef QVariant (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Enginio_QtCore->em_virthandlers[23]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

int sipEnginioModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,sipName_EnginioModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_24)(sipModuleAPI_Enginio_QtCore->em_virthandlers[24]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipEnginioModel::sibling(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return EnginioModel::sibling(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_Enginio_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

Qt::ItemFlags sipEnginioModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return EnginioModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_21)(sipModuleAPI_Enginio_QtCore->em_virthandlers[21]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return EnginioModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_Enginio_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipEnginioModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return EnginioModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_Enginio_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_EnginioModel_client, "EnginioModel.client() -> EnginioClient");

extern "C" {static PyObject *meth_EnginioModel_client(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_client(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_EnginioModel, &sipCpp))
        {
            EnginioClient*sipRes;

            sipRes = sipCpp->client();

            return sipConvertFromType(sipRes,sipType_EnginioClient,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_client, doc_EnginioModel_client);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_setClient, "EnginioModel.setClient(EnginioClient)");

extern "C" {static PyObject *meth_EnginioModel_setClient(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_setClient(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const EnginioClient* a0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_EnginioModel, &sipCpp, sipType_EnginioClient, &a0))
        {
            sipCpp->setClient(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_setClient, doc_EnginioModel_setClient);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_query, "EnginioModel.query() -> dict-of-str-QJsonValue");

extern "C" {static PyObject *meth_EnginioModel_query(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_query(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_EnginioModel, &sipCpp))
        {
            QJsonObject*sipRes;

            sipRes = new QJsonObject(sipCpp->query());

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_query, doc_EnginioModel_query);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_setQuery, "EnginioModel.setQuery(dict-of-str-QJsonValue)");

extern "C" {static PyObject *meth_EnginioModel_setQuery(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_EnginioModel, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            sipCpp->setQuery(*a0);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_setQuery, doc_EnginioModel_setQuery);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_operation, "EnginioModel.operation() -> Enginio.Operation");

extern "C" {static PyObject *meth_EnginioModel_operation(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_operation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_EnginioModel, &sipCpp))
        {
            Enginio::Operation sipRes;

            sipRes = sipCpp->operation();

            return sipConvertFromEnum(sipRes,sipType_Enginio_Operation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_operation, doc_EnginioModel_operation);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_setOperation, "EnginioModel.setOperation(Enginio.Operation)");

extern "C" {static PyObject *meth_EnginioModel_setOperation(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_setOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Enginio::Operation a0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_EnginioModel, &sipCpp, sipType_Enginio_Operation, &a0))
        {
            sipCpp->setOperation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_setOperation, doc_EnginioModel_setOperation);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_append, "EnginioModel.append(dict-of-str-QJsonValue) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioModel_append(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_EnginioModel, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->append(*a0);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_append, doc_EnginioModel_append);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_remove, "EnginioModel.remove(int) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioModel_remove(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_EnginioModel, &sipCpp, &a0))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->remove(a0);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_remove, doc_EnginioModel_remove);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_setData, "EnginioModel.setData(int, QVariant, str) -> EnginioReply\n"
    "EnginioModel.setData(int, dict-of-str-QJsonValue) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioModel_setData(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J1", &sipSelf, sipType_EnginioModel, &sipCpp, &a0, sipType_QVariant, &a1, &a1State, sipType_QString,&a2, &a2State))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->setData(a0,*a1,*a2);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    {
        int a0;
        const QJsonObject* a1;
        int a1State = 0;
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_EnginioModel, &sipCpp, &a0, sipType_QJsonObject,&a1, &a1State))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->setData(a0,*a1);
            sipReleaseType(const_cast<QJsonObject *>(a1),sipType_QJsonObject,a1State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_setData, doc_EnginioModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioModel_reload, "EnginioModel.reload() -> EnginioReply");

extern "C" {static PyObject *meth_EnginioModel_reload(PyObject *, PyObject *);}
static PyObject *meth_EnginioModel_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        EnginioModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_EnginioModel, &sipCpp))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->reload();

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioModel, sipName_reload, doc_EnginioModel_reload);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_EnginioModel(void *, const sipTypeDef *);}
static void *cast_EnginioModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_EnginioModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractListModel)->ctd_cast((QAbstractListModel *)(EnginioModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_EnginioModel(void *, int);}
static void release_EnginioModel(void *sipCppV,int)
{
    EnginioModel *sipCpp = reinterpret_cast<EnginioModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_EnginioModel(sipSimpleWrapper *);}
static void dealloc_EnginioModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipEnginioModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_EnginioModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_EnginioModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_EnginioModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipEnginioModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipEnginioModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_EnginioModel[] = {{8, 0, 1}};


static PyMethodDef methods_EnginioModel[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_EnginioModel_append, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_append)},
    {SIP_MLNAME_CAST(sipName_client), meth_EnginioModel_client, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_client)},
    {SIP_MLNAME_CAST(sipName_operation), meth_EnginioModel_operation, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_operation)},
    {SIP_MLNAME_CAST(sipName_query), meth_EnginioModel_query, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_query)},
    {SIP_MLNAME_CAST(sipName_reload), meth_EnginioModel_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_reload)},
    {SIP_MLNAME_CAST(sipName_remove), meth_EnginioModel_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_remove)},
    {SIP_MLNAME_CAST(sipName_setClient), meth_EnginioModel_setClient, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_setClient)},
    {SIP_MLNAME_CAST(sipName_setData), meth_EnginioModel_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_setData)},
    {SIP_MLNAME_CAST(sipName_setOperation), meth_EnginioModel_setOperation, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_setOperation)},
    {SIP_MLNAME_CAST(sipName_setQuery), meth_EnginioModel_setQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioModel_setQuery)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_EnginioModel[] = {
    {"operationChanged(Enginio::Operation)", "\1EnginioModel.operationChanged[Enginio.Operation]", 0, 0},
    {"clientChanged(EnginioClient*)", "\1EnginioModel.clientChanged[EnginioClient]", 0, 0},
    {"queryChanged(QJsonObject)", "\1EnginioModel.queryChanged[dict-of-str-QJsonValue]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_EnginioModel, "\1EnginioModel(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_Enginio_EnginioModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_EnginioModel,
        {0}
    },
    {
        sipNameNr_EnginioModel,
        {0, 0, 1},
        10, methods_EnginioModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_EnginioModel,
    -1,
    -1,
    supers_EnginioModel,
    0,
    init_type_EnginioModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_EnginioModel,
    0,
    0,
    0,
    release_EnginioModel,
    cast_EnginioModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &EnginioModel::staticMetaObject,
    0,
    signals_EnginioModel,
    0
};
