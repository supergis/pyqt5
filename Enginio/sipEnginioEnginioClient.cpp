/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6-snapshot-3c5425fa3c80 on Thu Jan 22 20:35:53 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIEnginio.h"

#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginioclient.sip"
#include <enginioclient.h>
#line 29 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginioreply.sip"
#include <enginioreply.h>
#line 36 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 24 "sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 39 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginio.sip"
#include <enginio.h>
#line 45 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/Enginio/enginioidentity.sip"
#include <enginioidentity.h>
#line 48 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 51 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 54 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/supermap/OpenThings/pyqt5/Enginio/sipEnginioEnginioClient.cpp"


class sipEnginioClient : public EnginioClient
{
public:
    sipEnginioClient(QObject*);
    virtual ~sipEnginioClient();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipEnginioClient(const sipEnginioClient &);
    sipEnginioClient &operator = (const sipEnginioClient &);

    char sipPyMethods[7];
};

sipEnginioClient::sipEnginioClient(QObject*a0): EnginioClient(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipEnginioClient::~sipEnginioClient()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipEnginioClient::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_Enginio_qt_metaobject(sipPySelf,sipType_EnginioClient);
}

int sipEnginioClient::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = EnginioClient::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Enginio_qt_metacall(sipPySelf,sipType_EnginioClient,_c,_id,_a);

    return _id;
}

void *sipEnginioClient::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_Enginio_qt_metacast(sipPySelf, sipType_EnginioClient, _clname, &sipCpp) ? sipCpp : EnginioClient::qt_metacast(_clname));
}

void sipEnginioClient::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        EnginioClient::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_Enginio_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioClient::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        EnginioClient::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_Enginio_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioClient::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        EnginioClient::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Enginio_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioClient::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        EnginioClient::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_Enginio_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipEnginioClient::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        EnginioClient::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Enginio_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipEnginioClient::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return EnginioClient::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_Enginio_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipEnginioClient::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return EnginioClient::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Enginio_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_Enginio_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_EnginioClient_fullTextSearch, "EnginioClient.fullTextSearch(dict-of-str-QJsonValue) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_fullTextSearch(PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_fullTextSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        EnginioClient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->fullTextSearch(*a0);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_fullTextSearch, doc_EnginioClient_fullTextSearch);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_query, "EnginioClient.query(dict-of-str-QJsonValue, Enginio.Operation operation=Enginio.ObjectOperation) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_query(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_query(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        Enginio::Operation a1 = Enginio::ObjectOperation;
        EnginioClient *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State, sipType_Enginio_Operation, &a1))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->query(*a0,a1);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_query, doc_EnginioClient_query);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_create, "EnginioClient.create(dict-of-str-QJsonValue, Enginio.Operation operation=Enginio.ObjectOperation) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        Enginio::Operation a1 = Enginio::ObjectOperation;
        EnginioClient *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State, sipType_Enginio_Operation, &a1))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->create(*a0,a1);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_create, doc_EnginioClient_create);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_update, "EnginioClient.update(dict-of-str-QJsonValue, Enginio.Operation operation=Enginio.ObjectOperation) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        Enginio::Operation a1 = Enginio::ObjectOperation;
        EnginioClient *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State, sipType_Enginio_Operation, &a1))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->update(*a0,a1);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_update, doc_EnginioClient_update);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_remove, "EnginioClient.remove(dict-of-str-QJsonValue, Enginio.Operation operation=Enginio.ObjectOperation) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_remove(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_remove(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        Enginio::Operation a1 = Enginio::ObjectOperation;
        EnginioClient *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State, sipType_Enginio_Operation, &a1))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->remove(*a0,a1);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_remove, doc_EnginioClient_remove);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_uploadFile, "EnginioClient.uploadFile(dict-of-str-QJsonValue, QUrl) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_uploadFile(PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_uploadFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        const QUrl* a1;
        EnginioClient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State, sipType_QUrl, &a1))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->uploadFile(*a0,*a1);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_uploadFile, doc_EnginioClient_uploadFile);

    return NULL;
}


PyDoc_STRVAR(doc_EnginioClient_downloadUrl, "EnginioClient.downloadUrl(dict-of-str-QJsonValue) -> EnginioReply");

extern "C" {static PyObject *meth_EnginioClient_downloadUrl(PyObject *, PyObject *);}
static PyObject *meth_EnginioClient_downloadUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonObject* a0;
        int a0State = 0;
        EnginioClient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_EnginioClient, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            EnginioReply*sipRes;

            sipRes = sipCpp->downloadUrl(*a0);
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromType(sipRes,sipType_EnginioReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EnginioClient, sipName_downloadUrl, doc_EnginioClient_downloadUrl);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_EnginioClient(void *, const sipTypeDef *);}
static void *cast_EnginioClient(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_EnginioClient)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_EnginioClientConnection)->ctd_cast((EnginioClientConnection *)(EnginioClient *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_EnginioClient(void *, int);}
static void release_EnginioClient(void *sipCppV,int)
{
    EnginioClient *sipCpp = reinterpret_cast<EnginioClient *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_EnginioClient(sipSimpleWrapper *);}
static void dealloc_EnginioClient(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipEnginioClient *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_EnginioClient(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_EnginioClient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_EnginioClient(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipEnginioClient *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipEnginioClient(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_EnginioClient[] = {{6, 255, 1}};


static PyMethodDef methods_EnginioClient[] = {
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_EnginioClient_create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_EnginioClient_create)},
    {SIP_MLNAME_CAST(sipName_downloadUrl), meth_EnginioClient_downloadUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioClient_downloadUrl)},
    {SIP_MLNAME_CAST(sipName_fullTextSearch), meth_EnginioClient_fullTextSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioClient_fullTextSearch)},
    {SIP_MLNAME_CAST(sipName_query), (PyCFunction)meth_EnginioClient_query, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_EnginioClient_query)},
    {SIP_MLNAME_CAST(sipName_remove), (PyCFunction)meth_EnginioClient_remove, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_EnginioClient_remove)},
    {SIP_MLNAME_CAST(sipName_update), (PyCFunction)meth_EnginioClient_update, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_EnginioClient_update)},
    {SIP_MLNAME_CAST(sipName_uploadFile), meth_EnginioClient_uploadFile, METH_VARARGS, SIP_MLDOC_CAST(doc_EnginioClient_uploadFile)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_EnginioClient[] = {
    {"error(EnginioReply*)", "\1EnginioClient.error[EnginioReply]", 0, 0},
    {"finished(EnginioReply*)", "\1EnginioClient.finished[EnginioReply]", 0, 0},
    {"sessionTerminated()", "\1EnginioClient.sessionTerminated", 0, 0},
    {"sessionAuthenticationError(EnginioReply*)", "\1EnginioClient.sessionAuthenticationError[EnginioReply]", 0, 0},
    {"sessionAuthenticated(EnginioReply*)", "\1EnginioClient.sessionAuthenticated[EnginioReply]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_EnginioClient, "\1EnginioClient(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_Enginio_EnginioClient = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_EnginioClient,
        {0}
    },
    {
        sipNameNr_EnginioClient,
        {0, 0, 1},
        7, methods_EnginioClient,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_EnginioClient,
    -1,
    -1,
    supers_EnginioClient,
    0,
    init_type_EnginioClient,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_EnginioClient,
    0,
    0,
    0,
    release_EnginioClient,
    cast_EnginioClient,
    0,
    0,
    0,
    0,
    0,
    0
},
    &EnginioClient::staticMetaObject,
    0,
    signals_EnginioClient,
    0
};
