/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.6-snapshot-3c5425fa3c80 on Thu Jan 22 20:34:47 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 28 "/home/supermap/OpenThings/pyqt5/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 29 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 26 "/home/supermap/OpenThings/pyqt5/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 36 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 39 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 28 "/home/supermap/OpenThings/pyqt5/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 42 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 45 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 34 "/home/supermap/OpenThings/pyqt5/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 48 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 50 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 51 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/supermap/OpenThings/pyqt5/QtQuick/sipQtQuickQSGEngine.cpp"


class sipQSGEngine : public QSGEngine
{
public:
    sipQSGEngine(QObject*);
    virtual ~sipQSGEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGEngine(const sipQSGEngine &);
    sipQSGEngine &operator = (const sipQSGEngine &);

    char sipPyMethods[7];
};

sipQSGEngine::sipQSGEngine(QObject*a0): QSGEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGEngine::~sipQSGEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSGEngine::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QSGEngine);
}

int sipQSGEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSGEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QSGEngine,_c,_id,_a);

    return _id;
}

void *sipQSGEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QSGEngine, _clname, &sipCpp) ? sipCpp : QSGEngine::qt_metacast(_clname));
}

void sipQSGEngine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSGEngine::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSGEngine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSGEngine::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSGEngine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSGEngine::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSGEngine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSGEngine::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSGEngine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSGEngine::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSGEngine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSGEngine::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSGEngine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSGEngine::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGEngine_initialize, "QSGEngine.initialize(QOpenGLContext)");

extern "C" {static PyObject *meth_QSGEngine_initialize(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext* a0;
        QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGEngine, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->initialize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_initialize, doc_QSGEngine_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QSGEngine_invalidate, "QSGEngine.invalidate()");

extern "C" {static PyObject *meth_QSGEngine_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_invalidate, doc_QSGEngine_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QSGEngine_createRenderer, "QSGEngine.createRenderer() -> QSGAbstractRenderer");

extern "C" {static PyObject *meth_QSGEngine_createRenderer(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createRenderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
            QSGAbstractRenderer*sipRes;

            sipRes = sipCpp->createRenderer();

            return sipConvertFromType(sipRes,sipType_QSGAbstractRenderer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createRenderer, doc_QSGEngine_createRenderer);

    return NULL;
}


PyDoc_STRVAR(doc_QSGEngine_createTextureFromImage, "QSGEngine.createTextureFromImage(QImage, QSGEngine.CreateTextureOptions options=(QSGEngine::CreateTextureOption)0) -> QSGTexture");

extern "C" {static PyObject *meth_QSGEngine_createTextureFromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createTextureFromImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        QSGEngine::CreateTextureOptions a1def = (QSGEngine::CreateTextureOption)0;
        QSGEngine::CreateTextureOptions* a1 = &a1def;
        int a1State = 0;
        const QSGEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QSGEngine, &sipCpp, sipType_QImage, &a0, sipType_QSGEngine_CreateTextureOptions, &a1, &a1State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_QSGEngine_CreateTextureOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createTextureFromImage, doc_QSGEngine_createTextureFromImage);

    return NULL;
}


PyDoc_STRVAR(doc_QSGEngine_createTextureFromId, "QSGEngine.createTextureFromId(int, QSize, QSGEngine.CreateTextureOptions options=(QSGEngine::CreateTextureOption)0) -> QSGTexture");

extern "C" {static PyObject *meth_QSGEngine_createTextureFromId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createTextureFromId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        const QSize* a1;
        QSGEngine::CreateTextureOptions a2def = (QSGEngine::CreateTextureOption)0;
        QSGEngine::CreateTextureOptions* a2 = &a2def;
        int a2State = 0;
        const QSGEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ9|J1", &sipSelf, sipType_QSGEngine, &sipCpp, &a0, sipType_QSize, &a1, sipType_QSGEngine_CreateTextureOptions, &a2, &a2State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromId(a0,*a1,*a2);
            sipReleaseType(a2,sipType_QSGEngine_CreateTextureOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createTextureFromId, doc_QSGEngine_createTextureFromId);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGEngine(void *, const sipTypeDef *);}
static void *cast_QSGEngine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSGEngine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSGEngine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGEngine(void *, int);}
static void release_QSGEngine(void *sipCppV,int)
{
    QSGEngine *sipCpp = reinterpret_cast<QSGEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGEngine(sipSimpleWrapper *);}
static void dealloc_QSGEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSGEngine *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSGEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGEngine[] = {{162, 0, 1}};


static PyMethodDef methods_QSGEngine[] = {
    {SIP_MLNAME_CAST(sipName_createRenderer), meth_QSGEngine_createRenderer, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_createRenderer)},
    {SIP_MLNAME_CAST(sipName_createTextureFromId), (PyCFunction)meth_QSGEngine_createTextureFromId, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGEngine_createTextureFromId)},
    {SIP_MLNAME_CAST(sipName_createTextureFromImage), (PyCFunction)meth_QSGEngine_createTextureFromImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGEngine_createTextureFromImage)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QSGEngine_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_initialize)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QSGEngine_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_invalidate)}
};

static sipEnumMemberDef enummembers_QSGEngine[] = {
    {sipName_TextureCanUseAtlas, static_cast<int>(QSGEngine::TextureCanUseAtlas), 34},
    {sipName_TextureHasAlphaChannel, static_cast<int>(QSGEngine::TextureHasAlphaChannel), 34},
    {sipName_TextureOwnsGLTexture, static_cast<int>(QSGEngine::TextureOwnsGLTexture), 34},
};

PyDoc_STRVAR(doc_QSGEngine, "\1QSGEngine(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGEngine,
        {0}
    },
    {
        sipNameNr_QSGEngine,
        {0, 0, 1},
        5, methods_QSGEngine,
        3, enummembers_QSGEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGEngine,
    -1,
    -1,
    supers_QSGEngine,
    0,
    init_type_QSGEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGEngine,
    0,
    0,
    0,
    release_QSGEngine,
    cast_QSGEngine,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSGEngine::staticMetaObject,
    0,
    0,
    0
};
